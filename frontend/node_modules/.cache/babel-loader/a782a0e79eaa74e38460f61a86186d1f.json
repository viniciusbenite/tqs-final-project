{"ast":null,"code":"var _jsxFileName = \"/home/alina/Desktop/UA-3ANO/TQS/projeto_final/tqs-final-project/frontend/src/context.js\";\nimport React, { Component } from 'react';\nimport getSaloes from './data';\nconst CabeleireirosContext = React.createContext();\n\nclass CabeleireirosProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      cabeleireiros: [],\n      sortedCabeleireiros: [],\n      loading: true,\n      nome: \"\",\n      cidade: \"\"\n    };\n\n    this.getCabeleireiro = slug => {\n      let tempCabeleireiros = [...this.state.cabeleireiros];\n      const cabeleireiro = tempCabeleireiros.find(cabeleireiro => cabeleireiro.slug === slug);\n      return cabeleireiro;\n    };\n\n    this.handleChange = event => {\n      const target = event.target;\n      const value = target.nome === 'checkbox' ? target.checked : target.value;\n      const name = event.target.name;\n      this.setState({\n        [name]: value\n      }, this.filterCabeleireiros);\n    };\n\n    this.filterCabeleireiros = () => {\n      let {\n        cabeleireiros,\n        nome,\n        cidade\n      } = this.state; // all the cabeleireiros\n\n      let tempCabeleireiros = [...cabeleireiros]; // filter by nome \n\n      if (nome !== \"\") {\n        tempCabeleireiros = tempCabeleireiros.filter(cabeleireiro => cabeleireiro.nome === nome);\n      } // filter by cidade\n\n\n      if (cidade !== \"\") {\n        tempCabeleireiros = tempCabeleireiros.filter(cabeleireiro => cabeleireiro.cidade === cidade);\n      } // change state \n\n\n      this.setState({\n        sortedCabeleireiros: tempCabeleireiros\n      });\n    };\n  }\n\n  // getData\n  componentDidMount() {\n    var cabeleireiros = [];\n    getSaloes().then(data => {\n      cabeleireiros = this.formatData(data);\n      this.setState({\n        cabeleireiros,\n        sortedCabeleireiros: cabeleireiros,\n        loading: false\n      });\n    });\n  }\n\n  formatData(items) {\n    let tempItems = items.map(item => {\n      let id = item.id;\n      let nome = item.name;\n      let slug = \"salao\";\n      let cidade = item.city;\n      let descricao = item.description;\n      let morada = item.address;\n      let imagens = [item.image];\n      let type = item.type;\n      let cabeleireiro = {\n        nome,\n        morada,\n        descricao,\n        slug,\n        cidade,\n        type,\n        imagens,\n        id\n      };\n      if (type != \"Barbeiro\") return cabeleireiro;\n    });\n    return tempItems;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(CabeleireirosContext.Provider, {\n      value: { ...this.state,\n        getCabeleireiro: this.getCabeleireiro,\n        handleChange: this.handleChange\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }\n    }, this.props.children);\n  }\n\n}\n\nconst CabeleireirosConsumer = CabeleireirosContext.Consumer;\nexport function withCabeleireirosConsumer(Component) {\n  return function ConsumerWrapper(props) {\n    return /*#__PURE__*/React.createElement(CabeleireirosConsumer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 16\n      }\n    }, value => /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n      context: value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 23\n      }\n    })));\n  };\n}\nexport { CabeleireirosProvider, CabeleireirosConsumer, CabeleireirosContext };","map":{"version":3,"sources":["/home/alina/Desktop/UA-3ANO/TQS/projeto_final/tqs-final-project/frontend/src/context.js"],"names":["React","Component","getSaloes","CabeleireirosContext","createContext","CabeleireirosProvider","state","cabeleireiros","sortedCabeleireiros","loading","nome","cidade","getCabeleireiro","slug","tempCabeleireiros","cabeleireiro","find","handleChange","event","target","value","checked","name","setState","filterCabeleireiros","filter","componentDidMount","then","data","formatData","items","tempItems","map","item","id","city","descricao","description","morada","address","imagens","image","type","render","props","children","CabeleireirosConsumer","Consumer","withCabeleireirosConsumer","ConsumerWrapper"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport getSaloes from './data';\n\n\nconst CabeleireirosContext = React.createContext();\n\nclass CabeleireirosProvider extends Component {\n\n    state = {\n        cabeleireiros: [],\n        sortedCabeleireiros: [],\n        \n        loading: true,\n        nome:\"\",\n        cidade:\"\",\n    };\n    // getData\n\n    componentDidMount() {\n\n        var cabeleireiros=[];\n        \n        getSaloes().then(data => {\n            \n          \n        cabeleireiros = this.formatData(data);\n        this.setState({\n            cabeleireiros,\n            \n            sortedCabeleireiros: cabeleireiros,\n            loading: false,\n            \n        });\n        });\n        \n    \n\n        \n    }\n\n    formatData(items) {\n        \n        let tempItems = items.map(item => {\n            let id = item.id;\n            let nome = item.name;\n            let slug = \"salao\";\n            let cidade = item.city;\n            let descricao=item.description;\n            let morada=item.address;\n            let imagens = [item.image];\n            let type = item.type;\n\n            let cabeleireiro = {nome,morada,descricao,slug,cidade,type,imagens,id }\n            if(type!=\"Barbeiro\") return cabeleireiro\n            \n        });\n       \n       \n       \n      \n        return tempItems\n    }\n    getCabeleireiro = (slug) => {\n        let tempCabeleireiros = [...this.state.cabeleireiros];\n        const cabeleireiro = tempCabeleireiros.find(cabeleireiro => cabeleireiro.slug === slug);\n        return cabeleireiro;\n    };\nhandleChange = event => {\n    const target = event.target;\n    const value = target.nome === 'checkbox' ?\n    target.checked : target.value;\n    const name = event.target.name;\n   this.setState({\n      [name] :value \n   },\n    this.filterCabeleireiros\n    );\n};\nfilterCabeleireiros = () => {\n    let{\n        cabeleireiros, \n        nome,\n        cidade,\n    } = this.state\n\n// all the cabeleireiros\nlet tempCabeleireiros = [...cabeleireiros];\n\n\n// filter by nome \n\nif(nome !== \"\") {\n    tempCabeleireiros = tempCabeleireiros.filter(cabeleireiro => cabeleireiro.nome ===\n    nome);\n}\n\n\n\n// filter by cidade\nif(cidade !== \"\") {\n    tempCabeleireiros = tempCabeleireiros.filter(cabeleireiro => cabeleireiro.cidade ===\n    cidade);\n}\n\n\n\n// change state \nthis.setState({\n    sortedCabeleireiros:tempCabeleireiros\n})\n};\n    render() {\n        return (\n        <CabeleireirosContext.Provider \n        value={{\n            ...this.state,\n            getCabeleireiro: this.getCabeleireiro,\n            handleChange: this.handleChange\n            }}>\n            {this.props.children}\n        </CabeleireirosContext.Provider>\n            \n         );\n    }\n  }\n\n\nconst CabeleireirosConsumer = CabeleireirosContext.Consumer;\nexport function withCabeleireirosConsumer(Component){\n    return function ConsumerWrapper(props){\n        return <CabeleireirosConsumer>\n            {value => <Component {...props} context={value} />}\n        </CabeleireirosConsumer>\n    }\n}\n\nexport { CabeleireirosProvider, CabeleireirosConsumer, CabeleireirosContext };"]},"metadata":{},"sourceType":"module"}