{"ast":null,"code":"var _jsxFileName = \"/home/alina/Documents/tqs-final-project-frontend/frontend/src/context.js\";\nimport React, { Component } from 'react';\nimport getSaloes from './data';\nconst CabeleireirosContext = React.createContext();\n\nclass CabeleireirosProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      cabeleireiros: [],\n      sortedCabeleireiros: [],\n      barbeiros: [],\n      sortedBarbeiros: [],\n      loading: true,\n      nome: \"\",\n      cidade: \"\"\n    };\n\n    this.getCabeleireiro = id => {\n      let tempCabeleireiros = [...this.state.cabeleireiros];\n      const cabeleireiro = tempCabeleireiros.find(cabeleireiro => cabeleireiro.id === id);\n      return cabeleireiro;\n    };\n\n    this.getBarbeiro = id => {\n      let tempBarbeiros = [...this.state.barbeiros];\n      const barbeiro = tempBarbeiros.find(barbeiro => barbeiro.id === id);\n      return barbeiro;\n    };\n\n    this.handleChangeCabeleireiros = event => {\n      const target = event.target;\n      const value = target.nome === 'checkbox' ? target.checked : target.value;\n      const name = event.target.name;\n      this.setState({\n        [name]: value\n      }, this.filterCabeleireiros);\n    };\n\n    this.handleChangeBarbeiros = event => {\n      const target = event.target;\n      const value = target.nome === 'checkbox' ? target.checked : target.value;\n      const name = event.target.name;\n      this.setState({\n        [name]: value\n      }, this.filterBarbeiros);\n    };\n\n    this.filterBarbeiros = () => {\n      let {\n        barbeiros,\n        nome,\n        cidade\n      } = this.state; // all the cabeleireiros\n\n      let tempBarbeiros = [...barbeiros]; // filter by nome \n\n      if (nome !== \"\") {\n        tempBarbeiros = tempBarbeiros.filter(barbeiro => barbeiro.nome === nome);\n      } // filter by cidade\n\n\n      if (cidade !== \"\") {\n        tempBarbeiros = tempBarbeiros.filter(barbeiro => barbeiro.cidade === cidade);\n      } // change state \n\n\n      this.setState({\n        sortedBarbeiros: tempBarbeiros\n      });\n    };\n\n    this.filterCabeleireiros = () => {\n      let {\n        cabeleireiros,\n        nome,\n        cidade\n      } = this.state; // all the cabeleireiros\n\n      let tempCabeleireiros = [...cabeleireiros]; // filter by nome \n\n      if (nome !== \"\") {\n        tempCabeleireiros = tempCabeleireiros.filter(cabeleireiro => cabeleireiro.nome === nome);\n      } // filter by cidade\n\n\n      if (cidade !== \"\") {\n        tempCabeleireiros = tempCabeleireiros.filter(cabeleireiro => cabeleireiro.cidade === cidade);\n      } // change state \n\n\n      this.setState({\n        sortedCabeleireiros: tempCabeleireiros\n      });\n    };\n  }\n\n  // getData\n  componentDidMount() {\n    var cabeleireiros = [];\n    var barbeiros = [];\n    getSaloes().then(data => {\n      cabeleireiros = this.formatDataCabeleireiros(data);\n      barbeiros = this.formatDataBarbeiros(data);\n      this.setState({\n        cabeleireiros: cabeleireiros,\n        barbeiros: barbeiros,\n        sortedBarbeiros: barbeiros,\n        sortedCabeleireiros: cabeleireiros,\n        loading: false\n      });\n    });\n  }\n\n  formatDataCabeleireiros(items) {\n    let tempItems = [];\n    items.map(item => {\n      let id = item.id;\n      let nome = item.name;\n      let cidade = item.city;\n      let descricao = item.description;\n      let morada = item.address;\n      let imagens = [item.image];\n      let type = item.type;\n      let contacto = item.contact;\n      let cabeleireiro = {\n        nome,\n        morada,\n        descricao,\n        cidade,\n        type,\n        imagens,\n        id,\n        contacto\n      };\n      if (type == \"Cabeleireiro\") tempItems.push(cabeleireiro);\n    });\n    return tempItems;\n  }\n\n  formatDataBarbeiros(items) {\n    let tempItems = [];\n    items.map(item => {\n      let id = item.id;\n      let nome = item.name;\n      let cidade = item.city;\n      let descricao = item.description;\n      let morada = item.address;\n      let imagens = [item.image];\n      let type = item.type;\n      let barbeiro = {\n        nome,\n        morada,\n        descricao,\n        cidade,\n        type,\n        imagens,\n        id\n      };\n      if (type == \"Barbeiro\") tempItems.push(barbeiro);\n    });\n    return tempItems;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(CabeleireirosContext.Provider, {\n      value: { ...this.state,\n        getCabeleireiro: this.getCabeleireiro,\n        handleChangeCabeleireiros: this.handleChangeCabeleireiros,\n        getBarbeiro: this.getBarbeiro,\n        handleChangeBarbeiros: this.handleChangeBarbeiros\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }\n    }, this.props.children);\n  }\n\n}\n\nconst CabeleireirosConsumer = CabeleireirosContext.Consumer;\nexport function withCabeleireirosConsumer(Component) {\n  return function ConsumerWrapper(props) {\n    return /*#__PURE__*/React.createElement(CabeleireirosConsumer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 16\n      }\n    }, value => /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n      context: value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 23\n      }\n    })));\n  };\n}\nexport { CabeleireirosProvider, CabeleireirosConsumer, CabeleireirosContext };","map":{"version":3,"sources":["/home/alina/Documents/tqs-final-project-frontend/frontend/src/context.js"],"names":["React","Component","getSaloes","CabeleireirosContext","createContext","CabeleireirosProvider","state","cabeleireiros","sortedCabeleireiros","barbeiros","sortedBarbeiros","loading","nome","cidade","getCabeleireiro","id","tempCabeleireiros","cabeleireiro","find","getBarbeiro","tempBarbeiros","barbeiro","handleChangeCabeleireiros","event","target","value","checked","name","setState","filterCabeleireiros","handleChangeBarbeiros","filterBarbeiros","filter","componentDidMount","then","data","formatDataCabeleireiros","formatDataBarbeiros","items","tempItems","map","item","city","descricao","description","morada","address","imagens","image","type","contacto","contact","push","render","props","children","CabeleireirosConsumer","Consumer","withCabeleireirosConsumer","ConsumerWrapper"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport getSaloes from './data';\n\n\nconst CabeleireirosContext = React.createContext();\n\nclass CabeleireirosProvider extends Component {\n\n    state = {\n        cabeleireiros: [],\n        sortedCabeleireiros: [],\n        barbeiros:[],\n        sortedBarbeiros:[],\n        \n        loading: true,\n        nome:\"\",\n        cidade:\"\",\n    };\n    // getData\n\n    componentDidMount() {\n\n        var cabeleireiros=[];\n        var barbeiros=[];\n\n\n        getSaloes().then(data => {\n\n        cabeleireiros = this.formatDataCabeleireiros(data);\n        barbeiros = this.formatDataBarbeiros(data);\n\n        this.setState({\n            cabeleireiros:cabeleireiros,\n            barbeiros:barbeiros,\n            sortedBarbeiros:barbeiros,\n            \n            sortedCabeleireiros: cabeleireiros,\n            loading: false,\n            \n        });\n        });\n    }\n\n    formatDataCabeleireiros(items) {\n\n        let tempItems=[];\n        \n        items.map(item => {\n            let id = item.id;\n            let nome = item.name;\n            let cidade = item.city;\n            let descricao=item.description;\n            let morada=item.address;\n            let imagens = [item.image];\n            let type = item.type;\n            let contacto=item.contact;\n\n            let cabeleireiro = {nome,morada,descricao,cidade,type,imagens,id ,contacto}\n            if(type==\"Cabeleireiro\") tempItems.push(cabeleireiro); \n            \n        });\n       \n       \n       \n      \n        return tempItems\n    }\n\n    formatDataBarbeiros(items) {\n\n        let tempItems=[];\n    \n        items.map(item => {\n            let id = item.id;\n            let nome = item.name;\n            let cidade = item.city;\n            let descricao=item.description;\n            let morada=item.address;\n            let imagens = [item.image];\n            let type = item.type;\n\n            let barbeiro = {nome,morada,descricao,cidade,type,imagens,id }\n            if(type==\"Barbeiro\") tempItems.push(barbeiro); \n            \n        });\n\n\n\n\n        return tempItems\n    }\n\n\n    getCabeleireiro = (id) => {\n        let tempCabeleireiros = [...this.state.cabeleireiros];\n        const cabeleireiro = tempCabeleireiros.find(cabeleireiro => cabeleireiro.id === id);\n        return cabeleireiro;\n    };\n\n\n    getBarbeiro = (id) => {\n        let tempBarbeiros = [...this.state.barbeiros];\n        const barbeiro = tempBarbeiros.find(barbeiro => barbeiro.id === id);\n        return barbeiro;\n    };\n\nhandleChangeCabeleireiros = event => {\n    const target = event.target;\n    const value = target.nome === 'checkbox' ?\n    target.checked : target.value;\n    const name = event.target.name;\n   this.setState({\n      [name] :value \n   },\n    this.filterCabeleireiros\n    );\n};\n\n\n    handleChangeBarbeiros = event => {\n        const target = event.target;\n        const value = target.nome === 'checkbox' ?\n        target.checked : target.value;\n        const name = event.target.name;\n    this.setState({\n        [name] :value \n    },\n        this.filterBarbeiros\n        );\n    };\n\n\n    filterBarbeiros = () => {\n        let{\n            barbeiros, \n            nome,\n            cidade,\n        } = this.state\n\n    // all the cabeleireiros\n    let tempBarbeiros = [...barbeiros];\n\n\n    // filter by nome \n\n    if(nome !== \"\") {\n        tempBarbeiros = tempBarbeiros.filter(barbeiro => barbeiro.nome ===\n        nome);\n    }\n\n\n\n    // filter by cidade\n    if(cidade !== \"\") {\n        tempBarbeiros = tempBarbeiros.filter(barbeiro => barbeiro.cidade ===\n        cidade);\n    }\n\n\n\n    // change state \n    this.setState({\n        sortedBarbeiros:tempBarbeiros\n    })\n    };\n\n\n\n    filterCabeleireiros = () => {\n        let{\n            cabeleireiros, \n            nome,\n            cidade,\n        } = this.state\n    \n    // all the cabeleireiros\n    let tempCabeleireiros = [...cabeleireiros];\n    \n    \n    // filter by nome \n    \n    if(nome !== \"\") {\n        tempCabeleireiros = tempCabeleireiros.filter(cabeleireiro => cabeleireiro.nome ===\n        nome);\n    }\n    \n    \n    \n    // filter by cidade\n    if(cidade !== \"\") {\n        tempCabeleireiros = tempCabeleireiros.filter(cabeleireiro => cabeleireiro.cidade ===\n        cidade);\n    }\n    \n    \n    \n    // change state \n    this.setState({\n        sortedCabeleireiros:tempCabeleireiros\n    })\n    };\n    \n\n\n    render() {\n        return (\n        <CabeleireirosContext.Provider \n        value={{\n            ...this.state,\n            getCabeleireiro: this.getCabeleireiro,\n            handleChangeCabeleireiros: this.handleChangeCabeleireiros,\n            getBarbeiro: this.getBarbeiro,\n            handleChangeBarbeiros: this.handleChangeBarbeiros,\n            }}>\n            {this.props.children}\n        </CabeleireirosContext.Provider>\n            \n         );\n    }\n  }\n\n\nconst CabeleireirosConsumer = CabeleireirosContext.Consumer;\nexport function withCabeleireirosConsumer(Component){\n    return function ConsumerWrapper(props){\n        return <CabeleireirosConsumer>\n            {value => <Component {...props} context={value} />}\n        </CabeleireirosConsumer>\n    }\n}\n\nexport { CabeleireirosProvider, CabeleireirosConsumer, CabeleireirosContext };"]},"metadata":{},"sourceType":"module"}